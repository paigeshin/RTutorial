# This program reads a dataset and performs
# some basic and common operations with data.
# Later we will learn how to import external
# datasets to R - for now let's learn a bit
# about some of the internal datasets that
# R has available
# ps - R studio does not support multi line comments
# in a simple way, hence all the #'s
# Let's take a look at the data() magic command
data()
# We'll check the mtcars dataset
data(mtcars)
# Calling ? on this dataset gives us
# more documentation
?mtcars
# checking first and bottom rows
head(mtcars, 5)
tail(mtcars, 5)
str(mtcars)
# Some statistics regarding the dataset
nrow(mtcars)
ncol(mtcars)
names(mtcars)
# The powerful summary command
summary(mtcars)
# Filtering the table - Selecting only the cars with
# cyl equals to 4
mtcars[mtcars$cyl==4,]
# Negating that example
mtcars[mtcars$cyl!=4,]
# Multiple selections - One example
method_1 = mtcars[mtcars$cyl %in% c(4,6),]
# Another way to do it
method_2 = mtcars[(mtcars$cyl==4) | (mtcars$cyl==6),]
# Are these objects the same?
method_1==method_2
# And operator
mtcars[(mtcars$hp>100) & (mtcars$hp<140),]
# Adding a new column - horsepower per weight
mtcars$hp_wt = mtcars$hp/mtcars$wt
# Another way to do it - but it returns a different type of object
mtcars['hp_wt'] = mtcars['hp']/mtcars['wt']
# Creating another column, a bit more complicated - car brand
# what are the steps needed to create this column?
# Get index
brands = rownames(mtcars)
# Get vector of splitted string
split_brand = strsplit(as.character(brands),' ')
# Extracting first row of each element
brand = sapply(split_brand, "[", 1)
# Creating new_column in dataset mtcars
mtcars['car_brand'] = brand
# We can apply other kinds of functions to columns
mtcars$miles_gallon_squared = mtcars$mpg**2
mtcars$sqrt_hp = mtcars$hp**2
mtcars
brands_origin = data.frame(
car_brand = c("Mazda","Toyota","Fiat","Volvo"),
country = c("Japan","Japan", "Italy", "Sweden")
)
View(brands_origin)
merge(mtcars,brands_origin,by="car_brand")
merge(mtcars,brands_origin,by="car_brand", all.x=TRUE)
merge(mtcars,brands_origin,by="car_brand", all.y=TRUE)
brands_origin = data.frame(
car_brand = c("Mazda","Toyota","Fiat","Volvo","Skoda"),
country = c("Japan","Japan", "Italy", "Sweden","Czech Republic")
)
# Inner Join
merge(mtcars,brands_origin,by="car_brand")
# Left Join
merge(mtcars,brands_origin,by="car_brand", all.x=TRUE)
# Right Join
merge(mtcars,brands_origin,by="car_brand", all.y=TRUE)
merge(mtcars,brands_origin,by="car_brand", all=TRUE)
library(sqldf)
install.packages("sqldf")
df3 <- sqldf("SELECT a.*, b.*
FROM mtcars as a
INNER JOIN brands_origin as b USING(car_brand)")
library(sqldf)
df3 <- sqldf("SELECT a.*, b.*
FROM mtcars as a
INNER JOIN brands_origin as b USING(car_brand)")
View(df3)
df3 <- sqldf("SELECT a.*, b.*
FROM mtcars as a
LEFT JOIN brands_origin as b ON car_brand")
df3 <- sqldf("SELECT a.*, b.*
FROM mtcars as a
LEFT JOIN brands_origin as b USING(car_brand)")
data()
data(mtcars)
force(mtcars)
View(mtcars)
?mtcars
dim(mtcars)
ncol(mtcars)
nrow(mtcars)
View(mtcars)
?head()
head(x=mtcars, n=5)
tail(x=mtcars, n=5)
str(mtcars)
row.names(mtcars)
brands = row.names(mtcars)
col.names(mtcars)
rownames(mtcars)
rownames(mtcars)
colnames(mtcars)
summary(mtcars)
data()
data(mtcars)
force(mtcars)
View(mtcars)
?mtcars
dim(mtcars)
nrow(mtcars)
ncol(mtcars)
?head
class(mtcars)
head(x=mtcars, n=5)
tail(x=mtcars, n=5)
str(mtcars)
rownames(mtcars)
colnames(mtcars)
summary(mtcars)
getcwd()
getwd()
