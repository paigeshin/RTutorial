# Load the walmart_data and walmart_features files
walmart_data = read.csv('./data/walmart_data.csv')
walmart_features = read.csv('./data/walmart_features.csv')
# Store the number of rows of walmart_data in a variable called
# n_rows
n_rows = nrow(walmart_data)
# Print the first 5 rows of the dataframe walmart_data
head(walmart_data, 5)
# Count the number of rows per store using the Table
# command and store the resulting object in R with the name
# rows_per_store
rows_per_store = table(walmart_data$Store)
# Convert rows_per_store to a data frame - Rewrite
# the object
rows_per_store = as.data.frame(rows_per_store)
# Medium Level Exercises
# Which store has the most rows? Retrieve this value using R code
rows_per_store[order(-rows_per_store$Freq),][1,]
# Sum the sales by store on walmart_data
# and store the data in a sum_by_store object
sum_by_store = aggregate(
walmart_data$Weekly_Sales,
by = list(walmart_data$Store),
FUN=sum
)
# rename the columns of the data frame produced
# above as store_number and total_sales
colnames(sum_by_store) <- c('store_number','total_sales')
# Plot bar plot using base r with sorting total sales
# from sales with most sales to stores least sales
# Give a title to the plot "Sales By Store"
# and color the bars darkgreen
# ignore the x labels for now
barplot(sum_by_store[order(-sum_by_store$total_sales),]$total_sales,
main = "Sales by Store",
col = "darkgreen")
# Compute the mean of every column in walmart_features
sapply(walmart_features, mean)
# Create a new column in walmart features called
# standardized_cpi subtracting the mean and dividing by the
# standard deviation
# Note: CPI has NAS!
walmart_features$sd_cpi = (
(walmart_features$CPI - mean(walmart_features$CPI, na.rm=TRUE))/
sd(walmart_features$CPI, na.rm=TRUE)
)
# Produce a line plot for sales of store number 1 for every department
# Add labels to x and y
# Hint: Check the function lines
store_1 = walmart_data[walmart_data$Store==1,]
store_1_total = aggregate(
store_1$Weekly_Sales,
list(store_1$Date),
FUN=sum
)
plot(store_1_total$Group.1,
store_1_total$x,
xlab='Weekly Sales',
ylab='Date')
setwd("C:/Users/ivopb/Google Drive/Courses Instruction/R Programming - A gentle Introduction/11 - Walmart Data Exercise")
# Load the walmart_data and walmart_features files
walmart_data = read.csv('./data/walmart_data.csv')
walmart_features = read.csv('./data/walmart_features.csv')
# Store the number of rows of walmart_data in a variable called
# n_rows
n_rows = nrow(walmart_data)
# Print the first 5 rows of the dataframe walmart_data
head(walmart_data, 5)
# Count the number of rows per store using the Table
# command and store the resulting object in R with the name
# rows_per_store
rows_per_store = table(walmart_data$Store)
# Convert rows_per_store to a data frame - Rewrite
# the object
rows_per_store = as.data.frame(rows_per_store)
# Medium Level Exercises
# Which store has the most rows? Retrieve this value using R code
rows_per_store[order(-rows_per_store$Freq),][1,]
# Sum the sales by store on walmart_data
# and store the data in a sum_by_store object
sum_by_store = aggregate(
walmart_data$Weekly_Sales,
by = list(walmart_data$Store),
FUN=sum
)
# rename the columns of the data frame produced
# above as store_number and total_sales
colnames(sum_by_store) <- c('store_number','total_sales')
# Plot bar plot using base r with sorting total sales
# from sales with most sales to stores least sales
# Give a title to the plot "Sales By Store"
# and color the bars darkgreen
# ignore the x labels for now
barplot(sum_by_store[order(-sum_by_store$total_sales),]$total_sales,
main = "Sales by Store",
col = "darkgreen")
# Compute the mean of every column in walmart_features
sapply(walmart_features, mean)
# Create a new column in walmart features called
# standardized_cpi subtracting the mean and dividing by the
# standard deviation
# Note: CPI has NAS!
walmart_features$sd_cpi = (
(walmart_features$CPI - mean(walmart_features$CPI, na.rm=TRUE))/
sd(walmart_features$CPI, na.rm=TRUE)
)
# Produce a line plot for sales of store number 1 for every department
# Add labels to x and y
# Hint: Check the function lines
store_1 = walmart_data[walmart_data$Store==1,]
store_1_total = aggregate(
store_1$Weekly_Sales,
list(store_1$Date),
FUN=sum
)
plot(store_1_total$Group.1,
store_1_total$x,
xlab='Weekly Sales',
ylab='Date')
lines(store_1_total$Group.1,
store_1_total$x)
str(store_1_total)
plot(factor(store_1_total$Group.1),
store_1_total$x,
xlab='Weekly Sales',
ylab='Date')
plot(as.factor(store_1_total$Group.1),
store_1_total$x,
xlab='Weekly Sales',
ylab='Date')
